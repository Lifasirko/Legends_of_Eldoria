# Project Folder Structure
.
‚îú‚îÄ‚îÄ bot/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ main.py             # –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –±–æ—Ç–∞ –∑ aiogram
‚îÇ   ‚îú‚îÄ‚îÄ config.py           # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è (—Ç–æ–∫–µ–Ω–∏, –ë–î, Redis)
‚îÇ   ‚îú‚îÄ‚îÄ handlers/           # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ callback_query
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ start.py        # /start
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ profile.py      # /profile, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ rest.py         # /rest, –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hunt.py         # /hunt, —à–≤–∏–¥–∫–µ –ø–æ–ª—é–≤–∞–Ω–Ω—è
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ quests.py       # –∫–≤–µ—Å—Ç–∏
‚îÇ   ‚îú‚îÄ‚îÄ middlewares/        # –õ–æ–≥—É–≤–∞–Ω–Ω—è, –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è, throttle
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ services/           # –ë—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ (battle_service, rest_service)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ battle_service.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ rest_service.py
‚îÇ   ‚îú‚îÄ‚îÄ utils/              # –£—Ç–∏–ª—ñ—Ç–∏ (time parsing, helpers)
‚îÇ   ‚îî‚îÄ‚îÄ keyboards/          # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
‚îÇ       ‚îî‚îÄ‚îÄ main_keyboard.py
‚îú‚îÄ‚îÄ models/                 # SQLAlchemy-–º–æ–¥–µ–ª—ñ –¥–ª—è Alembic
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ base.py             # Base —Ç–∞ —É—Å—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ
‚îú‚îÄ‚îÄ migrations/             # Alembic
‚îÇ   ‚îú‚îÄ‚îÄ env.py
‚îÇ   ‚îî‚îÄ‚îÄ versions/
‚îÇ       ‚îî‚îÄ‚îÄ 0001_initial.py # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è
‚îú‚îÄ‚îÄ tests/                  # Unit-—Ç–µ—Å—Ç–∏ (pytest)
‚îÇ   ‚îî‚îÄ‚îÄ test_battle.py
‚îú‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ README.md

# models/base.py
from sqlalchemy import Column, Integer, String, JSON, ForeignKey, DateTime, func
from sqlalchemy.orm import relationship, declarative_base

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True, index=True, nullable=False)
    username = Column(String)
    locale = Column(String, default='uk')
    created_at = Column(DateTime, server_default=func.now())
    last_seen = Column(DateTime, server_default=func.now(), onupdate=func.now())
    characters = relationship("Character", back_populates="owner")

class Character(Base):
    __tablename__ = 'characters'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False, index=True)
    class_name = Column(String, nullable=False)
    level = Column(Integer, default=1)
    stats = Column(JSON, nullable=False)
    xp = Column(Integer, default=0)
    last_action = Column(DateTime, server_default=func.now())

    owner = relationship("User", back_populates="characters")
    inventory_items = relationship("Inventory", back_populates="character")
    quests = relationship("QuestProgress", back_populates="character")
    transactions = relationship("Transaction", back_populates="character")

class Inventory(Base):
    __tablename__ = 'inventory'
    id = Column(Integer, primary_key=True)
    character_id = Column(Integer, ForeignKey('characters.id'), nullable=False, index=True)
    item_id = Column(Integer, ForeignKey('items.id'), nullable=False)
    quantity = Column(Integer, default=1)
    metadata = Column(JSON)

    character = relationship("Character", back_populates="inventory_items")
    item = relationship("Item", back_populates="inventory_entries")

class Item(Base):
    __tablename__ = 'items'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    type = Column(String, nullable=False)
    rarity = Column(String, nullable=False)
    base_stats = Column(JSON)
    craft_recipe = Column(JSON)

    inventory_entries = relationship("Inventory", back_populates="item")

class Skill(Base):
    __tablename__ = 'skills'
    id = Column(Integer, primary_key=True)
    class_name = Column(String, nullable=False)
    name = Column(String, nullable=False)
    type = Column(String, nullable=False)
    cost = Column(Integer, nullable=False)
    cooldown = Column(Integer, nullable=False)
    effect = Column(JSON)

class Quest(Base):
    __tablename__ = 'quests'
    id = Column(Integer, primary_key=True)
    type = Column(String, nullable=False)
    title = Column(String, nullable=False)
    description = Column(String)
    requirements = Column(JSON)
    rewards = Column(JSON)

class QuestProgress(Base):
    __tablename__ = 'quest_progress'
    id = Column(Integer, primary_key=True)
    character_id = Column(Integer, ForeignKey('characters.id'), nullable=False, index=True)
    quest_id = Column(Integer, ForeignKey('quests.id'), nullable=False)
    progress = Column(JSON)
    status = Column(String, default='in_progress')

    character = relationship("Character", back_populates="quests")
    quest = relationship("Quest")

class Guild(Base):
    __tablename__ = 'guilds'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    leader_id = Column(Integer, ForeignKey('users.id'))
    members = Column(JSON)
    fund_gold = Column(Integer, default=0)
    fund_gems = Column(Integer, default=0)

class Auction(Base):
    __tablename__ = 'auction'
    id = Column(Integer, primary_key=True)
    seller_id = Column(Integer, ForeignKey('characters.id'), nullable=False)
    item_id = Column(Integer, ForeignKey('items.id'), nullable=False)
    price_gold = Column(Integer)
    price_gems = Column(Integer)
    expires_at = Column(DateTime)

class Trade(Base):
    __tablename__ = 'trades'
    id = Column(Integer, primary_key=True)
    from_id = Column(Integer, ForeignKey('characters.id'), nullable=False)
    to_id = Column(Integer, ForeignKey('characters.id'), nullable=False)
    items = Column(JSON)
    gold = Column(Integer)
    gems = Column(Integer)
    status = Column(String, default='pending')

class BattleSession(Base):
    __tablename__ = 'battle_sessions'
    id = Column(Integer, primary_key=True)
    participants = Column(JSON)
    state = Column(JSON)
    created_at = Column(DateTime, server_default=func.now())

class Transaction(Base):
    __tablename__ = 'transactions'
    id = Column(Integer, primary_key=True)
    character_id = Column(Integer, ForeignKey('characters.id'), nullable=False)
    type = Column(String, nullable=False)
    amount = Column(Integer, nullable=False)
    currency = Column(String, nullable=False)
    created_at = Column(DateTime, server_default=func.now())

    character = relationship("Character", back_populates="transactions")

class Localization(Base):
    __tablename__ = 'localization'
    key = Column(String, primary_key=True)
    locale = Column(String, primary_key=True)
    text = Column(String, nullable=False)

# requirements.txt
aiogram==3.*
SQLAlchemy>=1.4
alembic>=1.9
psycopg2-binary
redis
celery
python-dotenv

# Dockerfile (sketch)
# FROM python:3.10-slim
# WORKDIR /app
# COPY requirements.txt .
# RUN pip install -r requirements.txt
# COPY . .
# CMD ["python", "bot/main.py"]

# docker-compose.yml (sketch)
# version: '3.8'
# services:
#   bot:
#     build: .
#     command: python bot/main.py
#     depends_on:
#       - db
#       - redis
#   db:
#     image: postgres:13
#     environment:
#       POSTGRES_DB: eldoria
#       POSTGRES_USER: user
#       POSTGRES_PASSWORD: pass
#     volumes:
#       - pgdata:/var/lib/postgresql/data
#   redis:
#     image: redis:6
# volumes:
#   pgdata:


# bot/main.py
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.redis import RedisStorage
from bot.config import BOT_TOKEN, REDIS_HOST, REDIS_PORT

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
from bot.handlers.start import register_handlers as register_start
from bot.handlers.profile import register_handlers as register_profile
from bot.handlers.rest import register_handlers as register_rest
from bot.handlers.hunt import register_handlers as register_hunt
from bot.handlers.quests import register_handlers as register_quests

async def main():
    storage = RedisStorage(host=REDIS_HOST, port=REDIS_PORT, db=0)
    dp = Dispatcher(storage=storage)
    bot = Bot(token=BOT_TOKEN, parse_mode="HTML")

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
    register_start(dp)
    register_profile(dp)
    register_rest(dp)
    register_hunt(dp)
    register_quests(dp)

    print("Bot is starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

# bot/keyboards/main_keyboard.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def main_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üó° –ü—Ä–∏–≥–æ–¥–∏", callback_data="menu:adventures"),
        InlineKeyboardButton("üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂", callback_data="menu:profile"),
    )
    kb.add(
        InlineKeyboardButton("üéí –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="menu:inventory"),
        InlineKeyboardButton("üèõ –ì—ñ–ª—å–¥—ñ—è", callback_data="menu:guild"),
    )
    kb.add(
        InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="menu:shop"),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="menu:settings"),
    )
    return kb

# bot/handlers/start.py
from aiogram import Router
from aiogram.types import Message
from bot.keyboards.main_keyboard import main_menu

router = Router()

def register_handlers(dp):
    dp.include_router(router)

@router.message(commands=["start"])
async def cmd_start(message: Message):
    await message.answer(
        "üè∞ –õ–µ–≥–µ–Ω–¥–∏ –ï–ª—å–¥–æ—Ä—ñ—ó\n–í—ñ—Ç–∞—é, –ì–µ—Ä–æ—é! –û–±–µ—Ä–∏ –¥—ñ—é:",
        reply_markup=main_menu()
    )

# bot/handlers/profile.py
from aiogram import Router
from aiogram.types import Message
from bot.services.profile_service import get_profile_text, get_profile_keyboard

router = Router()

def register_handlers(dp):
    dp.include_router(router)

@router.message(commands=["profile", "stats"])
async def cmd_profile(message: Message):
    text = await get_profile_text(message.from_user.id)
    kb = get_profile_keyboard()
    await message.answer(text, reply_markup=kb)

# bot/handlers/rest.py
from aiogram import Router
from aiogram.types import Message
from bot.services.rest_service import rest

router = Router()

def register_handlers(dp):
    dp.include_router(router)

@router.message(commands=["rest"])
async def cmd_rest(message: Message):
    # –û—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç "/rest 1h30m" –∞–±–æ "/rest"
    args = message.get_args()
    response = await rest(message.from_user.id, args)
    await message.answer(response)

# bot/handlers/hunt.py
from aiogram import Router
from aiogram.types import Message
from bot.services.battle_service import quick_hunt

router = Router()

def register_handlers(dp):
    dp.include_router(router)

@router.message(commands=["hunt", "explore"])
async def cmd_hunt(message: Message):
    text, kb = await quick_hunt(message.from_user.id)
    await message.answer(text, reply_markup=kb)

# bot/handlers/quests.py
from aiogram import Router
from aiogram.types import CallbackQuery
from bot.services.profile_service import list_quests, accept_quest

router = Router()

def register_handlers(dp):
    dp.include_router(router)

@router.callback_query(lambda c: c.data and c.data.startswith('quest:'))
async def process_quest(call: CallbackQuery):
    action, quest_id = call.data.split(':')
    if action == 'quest_accept':
        response = await accept_quest(call.from_user.id, int(quest_id))
        await call.message.answer(response)

# bot/services/profile_service.py (—Å–∫–µ–ª–µ—Ç)
async def get_profile_text(user_id: int) -> str:
    # TODO: –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –ë–î
    return "üë§ –†–∏—Ü–∞—Ä Lv.2\nHP 120/120 | MP 50/50\nATK 30 | DEF 20 | SPD 15 | MAG 5 | XP 150/300"

async def get_profile_keyboard():
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("üå≥ –¢–∞–ª–∞–Ω—Ç–∏", callback_data="menu:talents"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:main")
    )
    return kb

# bot/services/rest_service.py (—Å–∫–µ–ª–µ—Ç)
from bot.utils.time_parser import parse_duration

async def rest(user_id: int, args: str) -> str:
    # TODO: –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è HP/MP –∑–∞ —Ñ–æ—Ä–º—É–ª–æ—é
    duration = parse_duration(args) or 1  # –≥–æ–¥–∏–Ω–∏
    return f"–í—ñ–¥–ø–æ—á–∏–ª–∏ {duration}h. HP —Ç–∞ MP –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ."

# bot/services/battle_service.py (—Å–∫–µ–ª–µ—Ç)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

async def quick_hunt(user_id: int) -> tuple[str, InlineKeyboardMarkup]:
    # TODO: –ª–æ–≥—ñ–∫–∞ –±–æ—é
    text = "üå≤ –ì–∞–ª—è–≤–∏–Ω–∞ –ú–∞–≤–æ–∫ (Lv.1‚Äì3)\n–í–∏ –∑—É—Å—Ç—Ä—ñ–ª–∏: –ú–∞–≤–∫–∞-—Å—Ç—Ä—ñ–ª–µ—Ü—å Lv.1"
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–ê—Ç–∞–∫–∞", callback_data="battle:attack"),
        InlineKeyboardButton("–£–º—ñ–Ω–Ω—è", callback_data="battle:skill"),
    )
    kb.add(
        InlineKeyboardButton("–ü—Ä–µ–¥–º–µ—Ç", callback_data="battle:item"),
        InlineKeyboardButton("–ó–∞—Ö–∏—Å—Ç", callback_data="battle:defend"),
    )
    return text, kb

# bot/utils/time_parser.py
import re

def parse_duration(arg: str) -> int:
    # –ü–∞—Ä—Å–∏—Ç—å '1h30m' -> 1.5 –≥–æ–¥–∏–Ω–∏
    hours = re.search(r"(\d+)h", arg)
    mins = re.search(r"(\d+)m", arg)
    total = 0
    if hours:
        total += int(hours.group(1))
    if mins:
        total += int(mins.group(1)) / 60
    return total

# requirements.txt
aiogram==3.*
SQLAlchemy>=1.4
alembic>=1.9
psycopg2-binary
redis
python-dotenv

# Dockerfile and docker-compose.yml remain as previously sketched.

# bot/config.py
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
REDIS_HOST = os.getenv('REDIS_HOST', 'redis')
REDIS_PORT = int(os.getenv('REDIS_PORT', 6379))
DATABASE_URL = os.getenv('DATABASE_URL')

# Project Folder Structure
.
‚îú‚îÄ‚îÄ bot/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ main.py             # –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –±–æ—Ç–∞ –∑ aiogram3
‚îÇ   ‚îú‚îÄ‚îÄ config.py           # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: —Ç–æ–∫–µ–Ω, –ë–î, Redis
‚îÇ   ‚îú‚îÄ‚îÄ handlers/           # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ callback_query
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ start.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ profile.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ rest.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hunt.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ quests.py
‚îÇ   ‚îú‚îÄ‚îÄ services/           # –ë—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ battle_service.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ rest_service.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ profile_service.py
‚îÇ   ‚îú‚îÄ‚îÄ utils/              # –£—Ç–∏–ª—ñ—Ç–∏
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ time_parser.py
‚îÇ   ‚îî‚îÄ‚îÄ keyboards/          # Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
‚îÇ       ‚îî‚îÄ‚îÄ main_keyboard.py
‚îú‚îÄ‚îÄ models/                 # SQLAlchemy-–º–æ–¥–µ–ª—ñ
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ base.py
‚îú‚îÄ‚îÄ migrations/
‚îÇ   ‚îú‚îÄ‚îÄ env.py
‚îÇ   ‚îî‚îÄ‚îÄ versions/
‚îÇ       ‚îî‚îÄ‚îÄ 0001_initial.py
‚îú‚îÄ‚îÄ tests/                  # Unit-—Ç–µ—Å—Ç–∏
‚îÇ   ‚îú‚îÄ‚îÄ test_battle.py
‚îÇ   ‚îî‚îÄ‚îÄ test_rest.py
‚îú‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ README.md

# bot/services/rest_service.py
from bot.utils.time_parser import parse_duration

def calculate_rest(current_hp: int, max_hp: int, current_mp: int, max_mp: int, hours: float) -> tuple[int,int]:
    """
    –û–±—á–∏—Å–ª—é—î –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è HP —Ç–∞ MP –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É.
    """
    rest_hp = min(max_hp, current_hp + int(max_hp * 0.1 * hours))
    rest_mp = min(max_mp, current_mp + int(max_mp * 0.15 * hours))
    return rest_hp, rest_mp

async def rest(user_id: int, args: str) -> str:
    hours = parse_duration(args) or 1.0
    # TODO: –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –ë–î current_hp, max_hp, current_mp, max_mp –¥–ª—è user_id
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–ª—É—à–∫–∏:
    current_hp, max_hp = 50, 100
    current_mp, max_mp = 20, 50
    new_hp, new_mp = calculate_rest(current_hp, max_hp, current_mp, max_mp, hours)
    hp_diff = new_hp - current_hp
    mp_diff = new_mp - current_mp
    # TODO: –æ–Ω–æ–≤–∏—Ç–∏ –ë–î
    return f"üõå –í—ñ–¥–ø–æ—á–∏–ª–∏ {hours:.1f}h: HP +{hp_diff} ({current_hp}->{new_hp}), MP +{mp_diff} ({current_mp}->{new_mp})"

# bot/services/battle_service.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def calculate_effective_dmg(atk: int, def_: int) -> int:
    """
    –û–±—á–∏—Å–ª–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–Ω—É –±–µ–∑ –≤–∏–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ.
    –§–æ—Ä–º—É–ª–∞: floor(atk * 100 / (100 + def_)).
    """
    return (atk * 100) // (100 + def_)

def calculate_final_dmg(atk: int, def_: int, variation_percent: float = 0.05, random_factor: int = 0) -> int:
    """
    –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–Ω—É –∑ –≤–∞—Ä—ñ–∞—Ü—ñ—î—é.
    """
    effective = calculate_effective_dmg(atk, def_)
    return effective + random_factor

def simulate_fight(player: dict, monster: dict, random_factor: int = 0) -> tuple[list[tuple[str,int]], bool]:
    """
    –ü—Ä–æ—Å—Ç–∞ —Å–∏–º—É–ª—è—Ü—ñ—è –±–æ—é: –≥—Ä–∞–≤–µ—Ü—å –∞—Ç–∞–∫—É—î –ø–µ—Ä—à–∏–º.
    –ü–æ–≤–µ—Ä—Ç–∞—î –ª–æ–≥–∏ —Ö–æ–¥—ñ–≤ —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (True —è–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å –≤–∏–≥—Ä–∞–≤).
    """
    logs = []
    p_hp, m_hp = player['hp'], monster['hp']
    while p_hp > 0 and m_hp > 0:
        dmg = calculate_final_dmg(player['atk'], monster['def'], random_factor=random_factor)
        m_hp -= dmg
        logs.append(('player', dmg))
        if m_hp <= 0:
            break
        dmg_m = calculate_final_dmg(monster['atk'], player['def'], random_factor=random_factor)
        p_hp -= dmg_m
        logs.append(('monster', dmg_m))
    return logs, p_hp > 0

async def quick_hunt(user_id: int) -> tuple[str, InlineKeyboardMarkup]:
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    player = {'hp': 100, 'atk': 20, 'def': 5}
    monster = {'hp': 30, 'atk': 10, 'def': 2}
    logs, player_won = simulate_fight(player, monster, random_factor=0)
    text = "üå≤ –ì–∞–ª—è–≤–∏–Ω–∞ –ú–∞–≤–æ–∫ (Lv.1‚Äì3)\n"
    for actor, dmg in logs:
        if actor == 'player':
            text += f"üî∏ –í–∏ –∑–∞–≤–¥–∞–ª–∏ {dmg} DMG.\n"
        else:
            text += f"üîπ –ú–∞–≤–∫–∞ –∑–∞–≤–¥–∞–ª–∞ {dmg} DMG.\n"
    if player_won:
        xp, gold = 50, 20
        text += f"‚úÖ –ü–µ—Ä–µ–º–æ–≥–∞! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {xp} XP —Ç–∞ {gold} Gold."
    else:
        text += "‚ùå –ü–æ—Ä–∞–∑–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –ø—ñ–∑–Ω—ñ—à–µ."
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üèπ –ó–Ω–æ–≤—É –ø–æ–ª—é–≤–∞–Ω–Ω—è", callback_data="hunt:again"),
        InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data="menu:main")
    )
    return text, kb

# tests/test_battle.py
import pytest
from bot.services.battle_service import calculate_effective_dmg, calculate_final_dmg, simulate_fight


def test_calculate_effective_dmg():
    assert calculate_effective_dmg(120, 30) == 92  # floor(120*100/130)


def test_calculate_final_dmg_no_variation():
    assert calculate_final_dmg(120, 30, random_factor=0) == 92


def test_simulate_fight_player_wins():
    player = {'hp': 100, 'atk': 20, 'def': 5}
    monster = {'hp': 30, 'atk': 10, 'def': 2}
    logs, result = simulate_fight(player, monster, random_factor=0)
    assert result is True
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —â–æ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–∏–Ω —Ö—ñ–¥ –±—É–≤ –∑–∞–ø–∏—Å–∞–Ω–∏–π
    assert len(logs) >= 1

# tests/test_rest.py
from bot.services.rest_service import calculate_rest


def test_calculate_rest_full_restore():
    # –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–µ HP –º–∞–ª–µ, –∑–∞ 10 –≥–æ–¥–∏–Ω –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É –º–∞—î –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏—Å—å –¥–æ max
    new_hp, new_mp = calculate_rest(current_hp=10, max_hp=100, current_mp=5, max_mp=50, hours=10)
    assert new_hp == 100
    assert new_mp == 50


def test_calculate_rest_partial():
    new_hp, new_mp = calculate_rest(current_hp=40, max_hp=100, current_mp=10, max_mp=50, hours=2)
    # HP += 100*0.1*2 = 20
    assert new_hp == 60
    # MP += 50*0.15*2 = 15
    assert new_mp == 25
