from bot.utils.time_parser import parse_duration
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional

# –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É (–ø—ñ–∑–Ω—ñ—à–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö)
RESTING_USERS: Dict[int, datetime] = {}

def calculate_rest(current_hp: int, max_hp: int, current_mp: int, max_mp: int, hours: float) -> tuple[int,int]:
    """
    –û–±—á–∏—Å–ª—é—î –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è HP —Ç–∞ MP –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É.
    """
    rest_hp = min(max_hp, current_hp + int(max_hp * 0.1 * hours))
    rest_mp = min(max_mp, current_mp + int(max_mp * 0.15 * hours))
    return rest_hp, rest_mp

async def rest(user_id: int, duration: str = "1h") -> str:
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤–∂–µ –≤—ñ–¥–ø–æ—á–∏–≤–∞—î
    if user_id in RESTING_USERS:
        end_time = RESTING_USERS[user_id]
        if datetime.now() < end_time:
            remaining = end_time - datetime.now()
            return f"‚è≥ –í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ—á–∏–≤–∞—î—Ç–µ. –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remaining.seconds // 60} —Ö–≤–∏–ª–∏–Ω"
        else:
            del RESTING_USERS[user_id]
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
    try:
        hours = int(duration.replace("h", ""))
    except ValueError:
        hours = 1
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
    end_time = datetime.now() + timedelta(hours=hours)
    RESTING_USERS[user_id] = end_time
    
    # TODO: –ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞–Ω –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    
    return (
        f"üò¥ –í–∏ –ø–æ—á–∞–ª–∏ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏ –Ω–∞ {hours} –≥–æ–¥–∏–Ω.\n"
        f"‚è∞ –ß–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: {end_time.strftime('%H:%M')}\n\n"
        "–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å–∏!"
    )

async def check_rest_status(user_id: int) -> Optional[Dict]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É"""
    if user_id not in RESTING_USERS:
        return None
    
    end_time = RESTING_USERS[user_id]
    if datetime.now() >= end_time:
        # –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        del RESTING_USERS[user_id]
        return {
            "completed": True,
            "energy_restored": 100,  # TODO: –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —á–∞—Å—É
            "bonus_exp": 50  # TODO: –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —á–∞—Å—É
        }
    
    return {
        "completed": False,
        "remaining_minutes": (end_time - datetime.now()).seconds // 60
    }

async def rest_service(user_id: int, args: str) -> str:
    hours = parse_duration(args) or 1.0
    # TODO: –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –ë–î current_hp, max_hp, current_mp, max_mp –¥–ª—è user_id
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–ª—É—à–∫–∏:
    current_hp, max_hp = 50, 100
    current_mp, max_mp = 20, 50
    new_hp, new_mp = calculate_rest(current_hp, max_hp, current_mp, max_mp, hours)
    hp_diff = new_hp - current_hp
    mp_diff = new_mp - current_mp
    # TODO: –æ–Ω–æ–≤–∏—Ç–∏ –ë–î
    return f"üõå –í—ñ–¥–ø–æ—á–∏–ª–∏ {hours:.1f}h: HP +{hp_diff} ({current_hp}->{new_hp}), MP +{mp_diff} ({current_mp}->{new_mp})" 