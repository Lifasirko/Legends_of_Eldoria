from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
from datetime import datetime, timedelta
from typing import Dict, Optional, Tuple, List

# –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è –±–æ—ó–≤ —Ç–∞ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å
ACTIVE_BATTLES: Dict[int, Dict] = {}
EXPLORATION_RESULTS: Dict[int, Dict] = {}

# –ú–æ–∂–ª–∏–≤—ñ —Ä–µ—Å—É—Ä—Å–∏ —Ç–∞ —ó—Ö —à–∞–Ω—Å –ø–æ—è–≤–∏
RESOURCES = {
    "–≥—Ä–∏–±–∏": {"chance": 0.3, "min": 1, "max": 3},
    "–≥—ñ–ª–∫–∏": {"chance": 0.4, "min": 1, "max": 5},
    "—Ç—Ä–∞–≤–∞": {"chance": 0.5, "min": 1, "max": 4},
    "–∫–∞–º—ñ–Ω–Ω—è": {"chance": 0.2, "min": 1, "max": 2},
}

# –ú–æ–∂–ª–∏–≤—ñ –≤–æ—Ä–æ–≥–∏ —Ç–∞ —ó—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
ENEMIES = {
    "–≤–æ–≤–∫": {
        "name": "–í–æ–≤–∫",
        "hp": 50,
        "attack": 8,
        "defense": 3,
        "exp": 20,
        "gold": 15,
        "chance": 0.3,
        "tracks": "—Å–ª—ñ–¥–∏ –≤–æ–≤–∫–∞"
    },
    "–≤–µ–¥–º—ñ–¥—å": {
        "name": "–í–µ–¥–º—ñ–¥—å",
        "hp": 100,
        "attack": 15,
        "defense": 8,
        "exp": 40,
        "gold": 30,
        "chance": 0.1,
        "tracks": "—Å–ª—ñ–¥–∏ –≤–µ–¥–º–µ–¥—è"
    },
    "–±–∞–Ω–¥–∏—Ç": {
        "name": "–ë–∞–Ω–¥–∏—Ç",
        "hp": 80,
        "attack": 12,
        "defense": 5,
        "exp": 35,
        "gold": 50,
        "chance": 0.2,
        "tracks": "—Å–ª—ñ–¥–∏ –ª—é–¥–∏–Ω–∏"
    }
}

def calculate_effective_dmg(atk: int, def_: int) -> int:
    """
    –û–±—á–∏—Å–ª–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–Ω—É –±–µ–∑ –≤–∏–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ.
    –§–æ—Ä–º—É–ª–∞: floor(atk * 100 / (100 + def_)).
    """
    return (atk * 100) // (100 + def_)

def calculate_final_dmg(atk: int, def_: int, variation_percent: float = 0.05, random_factor: int = 0) -> int:
    """
    –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–Ω—É –∑ –≤–∞—Ä—ñ–∞—Ü—ñ—î—é.
    """
    effective = calculate_effective_dmg(atk, def_)
    return effective + random_factor

def simulate_fight(player: dict, monster: dict, random_factor: int = 0) -> tuple[list[tuple[str,int]], bool]:
    """
    –ü—Ä–æ—Å—Ç–∞ —Å–∏–º—É–ª—è—Ü—ñ—è –±–æ—é: –≥—Ä–∞–≤–µ—Ü—å –∞—Ç–∞–∫—É—î –ø–µ—Ä—à–∏–º.
    –ü–æ–≤–µ—Ä—Ç–∞—î –ª–æ–≥–∏ —Ö–æ–¥—ñ–≤ —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (True —è–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å –≤–∏–≥—Ä–∞–≤).
    """
    logs = []
    p_hp, m_hp = player['hp'], monster['hp']
    while p_hp > 0 and m_hp > 0:
        dmg = calculate_final_dmg(player['atk'], monster['def'], random_factor=random_factor)
        m_hp -= dmg
        logs.append(('player', dmg))
        if m_hp <= 0:
            break
        dmg_m = calculate_final_dmg(monster['atk'], player['def'], random_factor=random_factor)
        p_hp -= dmg_m
        logs.append(('monster', dmg_m))
    return logs, p_hp > 0

async def quick_hunt(user_id: int) -> Tuple[str, InlineKeyboardMarkup]:
    """–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó"""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤–∂–µ –≤ –±–æ—é
    if user_id in ACTIVE_BATTLES:
        battle = ACTIVE_BATTLES[user_id]
        if datetime.now() < battle["end_time"]:
            remaining = battle["end_time"] - datetime.now()
            return (
                f"‚öîÔ∏è –í–∏ –≤–∂–µ –≤ –±–æ—é!\n"
                f"‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remaining.seconds // 60} —Ö–≤–∏–ª–∏–Ω\n"
                f"‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤'—è: {battle['player_hp']}\n"
                f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è –≤–æ—Ä–æ–≥–∞: {battle['enemy_hp']}",
                battle["keyboard"]
            )
        else:
            del ACTIVE_BATTLES[user_id]
    
    # –®–∞–Ω—Å –∑–Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å–∏
    found_resources = []
    for resource, data in RESOURCES.items():
        if random.random() < data["chance"]:
            amount = random.randint(data["min"], data["max"])
            found_resources.append(f"{amount} {resource}")
    
    # –®–∞–Ω—Å –∑–Ω–∞–π—Ç–∏ –≤–æ—Ä–æ–≥–∞
    enemy = None
    for enemy_data in ENEMIES.values():
        if random.random() < enemy_data["chance"]:
            enemy = enemy_data
            break
    
    # –®–∞–Ω—Å –∑–Ω–∞–π—Ç–∏ —Å–ª—ñ–¥–∏
    tracks = None
    if not enemy and random.random() < 0.4:
        tracks = random.choice(list(ENEMIES.values()))["tracks"]
    
    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    text = "üîç –í–∏ –¥–æ—Å–ª—ñ–¥–∂—É—î—Ç–µ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é...\n\n"
    
    if found_resources:
        text += "üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–∏:\n" + "\n".join(f"‚Ä¢ {r}" for r in found_resources) + "\n\n"
    
    if tracks:
        text += f"üë£ –í–∏ –ø–æ–º—ñ—Ç–∏–ª–∏ {tracks}\n\n"
    
    if enemy:
        text += (
            f"‚ö†Ô∏è –í–∏ –Ω–∞—Ç—Ä–∞–ø–∏–ª–∏ –Ω–∞ {enemy['name']}!\n\n"
            f"‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤'—è: 100\n"  # TODO: –û—Ç—Ä–∏–º–∞—Ç–∏ –∑ –ë–î
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è –≤–æ—Ä–æ–≥–∞: {enemy['hp']}\n"
            f"‚öîÔ∏è –ê—Ç–∞–∫–∞ –≤–æ—Ä–æ–≥–∞: {enemy['attack']}\n"
            f"üõ° –ó–∞—Ö–∏—Å—Ç –≤–æ—Ä–æ–≥–∞: {enemy['defense']}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—é
        battle = {
            "enemy": enemy,
            "player_hp": 100,  # TODO: –û—Ç—Ä–∏–º–∞—Ç–∏ –∑ –ë–î
            "enemy_hp": enemy["hp"],
            "end_time": datetime.now() + timedelta(minutes=5),
            "keyboard": None
        }
        
        buttons = [
            [
                InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫—É–≤–∞—Ç–∏", callback_data="hunt:attack"),
                InlineKeyboardButton(text="üõ° –ó–∞—Ö–∏—â–∞—Ç–∏—Å—è", callback_data="hunt:defend")
            ],
            [
                InlineKeyboardButton(text="üèÉ –í—Ç–µ–∫—Ç–∏", callback_data="hunt:flee"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:main")
            ]
        ]
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        battle["keyboard"] = kb
        ACTIVE_BATTLES[user_id] = battle
    else:
        text += "‚úÖ –í–∏ –±–µ–∑–ø–µ—á–Ω–æ –¥–æ—Å–ª—ñ–¥–∏–ª–∏ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é"
        buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:main")]]
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    return text, kb

async def process_battle_action(user_id: int, action: str) -> str:
    """–û–±—Ä–æ–±–∫–∞ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π"""
    if user_id not in ACTIVE_BATTLES:
        return "‚ùå –í–∏ –Ω–µ –≤ –±–æ—é!"
    
    battle = ACTIVE_BATTLES[user_id]
    if datetime.now() >= battle["end_time"]:
        del ACTIVE_BATTLES[user_id]
        return "‚è∞ –ß–∞—Å –±–æ—é –≤–∏–π—à–æ–≤!"
    
    enemy = battle["enemy"]
    player_hp = battle["player_hp"]
    enemy_hp = battle["enemy_hp"]
    
    if action == "attack":
        # –ê—Ç–∞–∫–∞ –≥—Ä–∞–≤—Ü—è
        damage = calculate_final_dmg(15, enemy["defense"])  # TODO: –û—Ç—Ä–∏–º–∞—Ç–∏ –∞—Ç–∞–∫—É –≥—Ä–∞–≤—Ü—è –∑ –ë–î
        enemy_hp -= damage
        battle["enemy_hp"] = enemy_hp
        
        # –ê—Ç–∞–∫–∞ –≤–æ—Ä–æ–≥–∞
        if enemy_hp > 0:
            enemy_damage = calculate_final_dmg(enemy["attack"], 5)  # TODO: –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—Ö–∏—Å—Ç –≥—Ä–∞–≤—Ü—è –∑ –ë–î
            player_hp -= enemy_damage
            battle["player_hp"] = player_hp
            
            if player_hp <= 0:
                del ACTIVE_BATTLES[user_id]
                return "‚ùå –í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏ –±—ñ–π!"
        
        if enemy_hp <= 0:
            del ACTIVE_BATTLES[user_id]
            return f"‚úÖ –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏ {enemy['name']}!\nüí∞ –û—Ç—Ä–∏–º–∞–Ω–æ: {enemy['gold']} –∑–æ–ª–æ—Ç–∞\n‚ú® –î–æ—Å–≤—ñ–¥: {enemy['exp']}"
        
        return (
            f"‚öîÔ∏è –í–∏ –∑–∞–≤–¥–∞–ª–∏ {damage} —à–∫–æ–¥–∏!\n"
            f"‚öîÔ∏è –í–æ—Ä–æ–≥ –∑–∞–≤–¥–∞–≤ {enemy_damage} —à–∫–æ–¥–∏!\n\n"
            f"‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤'—è: {player_hp}\n"
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è –≤–æ—Ä–æ–≥–∞: {enemy_hp}"
        )
    
    elif action == "defend":
        # –ó–∞—Ö–∏—Å—Ç –≥—Ä–∞–≤—Ü—è
        enemy_damage = calculate_final_dmg(enemy["attack"], 10)  # TODO: –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—Ö–∏—Å—Ç –≥—Ä–∞–≤—Ü—è –∑ –ë–î
        player_hp -= enemy_damage // 2  # –ó–º–µ–Ω—à—É—î–º–æ —à–∫–æ–¥—É –≤–¥–≤—ñ—á—ñ
        battle["player_hp"] = player_hp
        
        if player_hp <= 0:
            del ACTIVE_BATTLES[user_id]
            return "‚ùå –í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏ –±—ñ–π!"
        
        return (
            f"üõ° –í–∏ –∑–∞—Ö–∏—â–∞—î—Ç–µ—Å—å!\n"
            f"‚öîÔ∏è –í–æ—Ä–æ–≥ –∑–∞–≤–¥–∞–≤ {enemy_damage // 2} —à–∫–æ–¥–∏!\n\n"
            f"‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤'—è: {player_hp}\n"
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è –≤–æ—Ä–æ–≥–∞: {enemy_hp}"
        )
    
    elif action == "flee":
        # –°–ø—Ä–æ–±–∞ –≤—Ç–µ—á—ñ
        if random.random() < 0.5:  # 50% —à–∞–Ω—Å –≤—Ç–µ—á—ñ
            del ACTIVE_BATTLES[user_id]
            return "üèÉ –í–∞–º –≤–¥–∞–ª–æ—Å—è –≤—Ç–µ–∫—Ç–∏!"
        else:
            enemy_damage = calculate_final_dmg(enemy["attack"], 5)
            player_hp -= enemy_damage
            battle["player_hp"] = player_hp
            
            if player_hp <= 0:
                del ACTIVE_BATTLES[user_id]
                return "‚ùå –í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏ –±—ñ–π!"
            
            return (
                f"‚ùå –í—Ç–µ—á–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è!\n"
                f"‚öîÔ∏è –í–æ—Ä–æ–≥ –∑–∞–≤–¥–∞–≤ {enemy_damage} —à–∫–æ–¥–∏!\n\n"
                f"‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤'—è: {player_hp}\n"
                f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è –≤–æ—Ä–æ–≥–∞: {enemy_hp}"
            )
    
    return "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è" 